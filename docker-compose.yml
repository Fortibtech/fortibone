version: '3.8'

services:
  # Service de l'API NestJS
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fortibone-api
    restart: unless-stopped
    ports:
      - "3029:3000"
    volumes:
      # Monte le dossier 'uploads' pour que les fichiers persistent même si le conteneur est recréé
      - ./uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=${PORT}
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FILE_STORAGE_PROVIDER=${FILE_STORAGE_PROVIDER}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
    depends_on:
      db: # S'assure que la base de données démarre avant l'API
        condition: service_healthy # Attend que le healthcheck de 'db' passe


  # Service de la Base de Données PostgreSQL
  db:
    image: postgis/postgis:14-3.4 # Utilise une image officielle avec PostGIS
    container_name: fortibone-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5438:5432"
    volumes:
      # Crée un volume Docker pour que les données de la BDD persistent
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s # Vérifie toutes les 10 secondes
      timeout: 5s   # Si la commande prend plus de 5s, elle échoue
      retries: 5    # Tente 5 fois avant de marquer comme "unhealthy"


volumes:
  # Définit le volume pour la persistance des données PostgreSQL
  postgres_data: